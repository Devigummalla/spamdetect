# -*- coding: utf-8 -*-
"""spamdetect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1geDMGfE_HK0ea6dBpBF-XN-aj0bRnTVf
"""

import pandas as pd
import numpy as np
import re
import string

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
url = "/content/spam.csv"
df = pd.read_csv(url, encoding='latin-1')
df = df[['v1', 'v2']]  # Keeping only necessary columns
df.columns = ['label', 'message']

# Convert labels to binary values (ham = 0, spam = 1)
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Preprocessing function to clean text
def clean_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(f"[{string.punctuation}]", "", text)  # Remove punctuation
    return text

df['message'] = df['message'].apply(clean_text)

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2, random_state=42)

# Convert text into numerical features using TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a Na√Øve Bayes classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Predict on test data
y_pred = model.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Test the model with an example email
example_email = ["Congratulations! You have won a free iPhone. Click the link to claim now."]
example_email_cleaned = [clean_text(email) for email in example_email]
example_email_tfidf = vectorizer.transform(example_email_cleaned)

prediction = model.predict(example_email_tfidf)[0]
label = "Spam" if prediction == 1 else "Ham"

print(f"\nExample Email: {example_email[0]}")
print(f"Predicted Label: {label}")